#!/bin/bash

function valid_ip_or_network()
# adapted from a validation function written by Mitch Frazier (Linux Journal - June 26, 2008)
{
    local  ip=$1
    local  stat=1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(\/[0-9]{1,3})?$ ]]; then
        OIFS=$IFS
        IFS='./'
        ip=($ip)
        IFS=$OIFS
        [[ ( ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ) && ( ${#ip[@]} -eq 4 || ( ${#ip[@]} -eq 5 &&  ${ip[4]} -le 255 ) ) ]]
        stat=$?
    fi
    return $stat
}

declare -a local_networks_and_computers
window_title="VPN Client Gateway firewall configuration"
whiptail --title "$window_title" --yesno --defaultno "Does your VPN Client Gateway server need access to other computers on your local network (e.g. for NFS shares etc.)? Choose 'No' if you're not sure." 9 62 3>&1 1>&2 2>&3
confirm=$?
if [ $confirm = 0 ]; then
	local_access_required=true
else
	local_access_required=false
fi
if [ $local_access_required = true ]; then
	valid_network=false
	network="192.168.1.0/24"
	prompt="Enter the local network using slash notation (e.g. $network)\nor the IP address of a specific computer (e.g. 192.168.1.7)"
	more_networks=true
		while [ $more_networks = true ]; do
			error_message=""
			valid_network=false
			while [ $valid_network = false ]; do
		        	network=$(whiptail --title "$window_title" --inputbox "$error_message$prompt" --nocancel 9 72 "$network" 3>&1 1>&2 2>&3)
				if valid_ip_or_network $network; then
					valid_network=true
			                whiptail --title "$window_title" --yesno "Adding the following local network / computer to the firewall rules:\n\n$network" --yes-button "Ok" --no-button "Modify" 10 62 "$network" 3>&1 1>&2 2>&3
					confirm=$?
					if [ $confirm = 1 ]; then
						error_message=""
						valid_network=false
					fi
				else
					error_message="Invalid IP address or local network format!\n"
					valid_network=false
				fi
			done
			local_networks_and_computers=(${local_networks_and_computers[@]} $network)
			whiptail --title "$window_title" --yesno "Add more networks / computers?" --defaultno 9 40
			confirm=$?
			if [ $confirm = 1 ]; then
				more_networks=false
			else
				more_networks=true
			fi
		done
fi
# generate firewall script from template
if [ ${#local_networks_and_computers[@]} -gt 0 ]; then
	for i in "${local_networks_and_computers[@]}"; do
		local_network_rules+="iptables -A OUTPUT -d $i -o eth0 -m comment --comment \"local lan\" -j ACCEPT\n"
	done
	sed -e "/local_network_rules/a\\$local_network_rules" fw-template > fw-script
	#sed "s#.*<local_network>.*#$local_lan_iptables#g" fw-template > fw-script
else
	cp fw-template fw-script
fi
chmod u+x fw-script
whiptail --title "$window_title" --msgbox "Firewall script has been created. Review the file, then press 'Q' to quit the file viewer." 9 62 3>&1 1>&2 2>&3
less fw-script
whiptail --title "$window_title" --yesno "Do you want to run the firewall script now?" 9 50 3>&1 1>&2 2>&3
runscript=$?
if [ $runscript = 0 ]; then
	printf "Running firewall script..."
	sudo ./fw-script
	whiptail --title "$window_title" --msgbox "Firewall rules have been installed, the VPN Client Gateway will now forward traffic via the VPN tunnel. The 'killswitch' is now active; all internet access via the VPN Client Gateway will be blocked if the VPN connection drops." 13 60 3>&1 1>&2 2>&3
else
	printf "\nFirewall script has been created in the file 'fw-script'. Please review the file, then run as root to install the firewall rules:\n'sudo ./fw-script'\nThe VPN Client Gateway will not forward traffic until you run this script!\n"
fi
